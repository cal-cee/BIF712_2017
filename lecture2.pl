#lecture 2

#to avoid unexpected programming errors (ex. undefined behaviour) perl has some
#language features to check for errors
#one of these is  called "perl strict"
use strict;
#to use perl strict put the line above at the start of your program!
#perl strict generates errors for "non-standard" coding patterns (i.e. potentially unsafe things)
#1)generates an error if you use a variable before "declaring it" with the "my" statement
#2)generates errors if you use a symbolic reference
#3)generates an error if you try to use an identifier in a wrong way
#the other feature to help catch errors is: "use warnings"
use warnings;
#use warnings generates run-time warnings and potential errors that would ordinarily
#be ignored by the perl interpreter, but may lead to subtle logic or other errors

#FROM NOW ON ALWAYS HAVE use strict AND use warnings AT THE START OF YOUR PERL SCRIPTS!!!




#in addition to math operators perl also has many powerful string manipulation 
#and inspection operators built in

#string concatenation is analogous to addition in math. it means to add strings together
#end-to-end resulting in a longer string (usually, unless one string is empty "")
#the operator to concatenate strings is "." (the dot or period character)
my $s1 = "AUG-"; #the my keyword is to "declare" variable s1
my $s2 = "AAA";
my $s12 = $s1 . $s2;
print "string 1 is: $s1, string 2 is: $s2, the concatenated strings are: $s12 \n";
#exercise: try concatenating a "literal string" "GGG" at the end of s12
#notice we can reassign the value on the lhs back to the original string, changing it
$s12 = $s12 . "GGG";
print "the modified s12 is: $s12\n";
#perl also has a repetition operator if you want to repeat strings
my $s4 = "ACGT";
my $s3 = $s12 . $s4 x5;
print "the concatenated string with repeated ending: $s3\n";

#what about string comparisons?
#beware, the artithmetic operators and string comparson operators are NOT THE SAME
#equality "eq"
#not equal "ne"
#comparison "cmp" (corresponds to the spaceship <=> operator in arithmetic)
#less than "lt"
#greater than "gt"
#less than or equal "le"
#greater than or equal "ge"
#these operate lexically or alphabetically rather than numerically
#ex.
print "is atcg gt ATCG ? " , "atcg" gt "ATCG", "\n"; #atcg comes after ATCG according to ASCII table
print "is ACGT gt CAGT ? " , "ACGT" gt "CAGT", "\n"; #ACGT does not come after CAGT alphabetically
print "rna lt dna ? ", "rna" lt "dna", "\n";
print "APPLE cmp Apple ? ", "APPLE" cmp "Apple", "\n"; #recall cmp will give -1,0,1 as answers
#let's see what happens if we use == to compare strings
print "four == six ? ", "four" == "six", "\n";
#notice that by default, perl will try to convert both "four" and "six" to numbers
#in order to work with the "==" operator. It fails, and concludes that both are the same thing
#the lesson is: do not use numerical operators with strings, and vice versa (undefined behaviour)
#notice the warning generated by "use warnings"

#recall that characters of text are all represented as numbers (ASCII system)
#we can determine the numerical ASCII code for any character by using the "ord" keyword
print "Symbol A has an ASCII value of: ", ord('A'), "\n";
#do 'a' '0' (zero) '#' '?'
#also try to ord a short string such as "abc"
print "Symbol a has an ASCII value of: ", ord('a'), "\n";
print "Symbol 0 has an ASCII value of: ", ord('0'), "\n";
print "Symbol # has an ASCII value of: ", ord('#'), "\n";
print "Symbol ? has an ASCII value of: ", ord('?'), "\n";
print "string abc has an ASCII value of: ", ord("abc"), "\n";

#sometimes newlines and other characters are appended when you get input from <STDIN>
#or other sources.
#the "chomp" function or keyword removes trailing characters from the end of a string
#by default it removes new lines "\n" from the end of strings, but it can be used in other
#ways as well. note: chomp will permanently alter the string that you supply example:
print "please enter some text and press <enter>: ";
my $userInput = <STDIN>;
print "the user's input is ***$userInput***";
#notice the newline from the user pressing <enter> is included in the variable $userInput
chomp($userInput);
print "AFTER CHOMP the user's input is ***$userInput***";
